<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace写明对应的操作类-->
<mapper namespace="com.free.mybatis.mapper.EmpMapper">
    <!--设置自定义的映射关系
    id:唯一标识
    type:处理映射关系的实体类的类型
    id:处理主键和实体类中属性的映射关系
    result:处理普通字段和实体类中属性的映射关系
    column:设置映射关系的字段名，必须是sql查询出来的某个字段
    property:设置映射关系中的属性的属性名，必须是处理的实体类型的属性名
    -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
    <resultMap id="empAndDept" type="Emp">
        <id property="empId" column="emp_id"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="gender" column="gender"></result>
        <result property="dept.deptId" column="dept_id"></result>
        <result property="dept.deptName" column="dept_name"></result>
    </resultMap>

    <resultMap id="empAndDeptTwo" type="Emp">
        <id column="emp_id" property="empId"></id>
        <result column="emp_name" property="empName"></result>
        <result column="age" property="age"></result>
        <result column="gender" property="gender"></result>
        <!--
        association:处理多对一的映射关系
        property:设置需要处理映射关系的属性的属性名
        javaType:设置需要处理的属性的类型
        -->
        <association property="dept" javaType="Dept">
            <id column="dept_id" property="deptId"></id>
            <result column="dept_name" property="deptName"></result>
        </association>
    </resultMap>

    <!--
        association:处理多对一的映射关系
        property:设置需要处理映射关系的属性的属性名
        select:设置下一步查询的唯一标识
        column：将查询出的某个字段作为下一步查询的sql的条件。
        fetchType:在开启了延迟加载的环境中，通过该属性设置当前分步查询是否使用延迟加载
    -->
    <resultMap id="empAndDeptThree" type="Emp">
        <id property="empId" column="emp_id"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="gender" column="gender"></result>
        <association property="dept" fetchType="eager"
                     select="com.free.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                     column="dept_id">
        </association>
    </resultMap>


    <resultMap id="empMap" type="Emp">
        <id column="emp_id" property="empId"></id>
        <result column="emp_name" property="empName"></result>
        <result column="age" property="age"></result>
        <result column="gender" property="gender"></result>

    </resultMap>
    <!--    Emp getEmpByEmpId(@Param("empId") Integer empId)-->
    <select id="getEmpByEmpId" resultMap="empMap">
        select * from t_emp where emp_id=#{empId}
    </select>
    <!--    Emp getEmpAndDeptByEmpId()-->
    <select id="getEmpAndDeptByEmpId" resultMap="empAndDeptTwo">
        select t_emp.*,t_dept.* from t_emp left join t_dept on t_emp.dept_id=t_dept.dept_id where t_emp.emp_id=#{empId}
    </select>

    <!--    Emp getEmpAndDeptByStepOne(@Param("empId") Integer empId)-->
    <select id="getEmpAndDeptByStepOne" resultMap="empAndDeptThree">
        select * from t_emp where emp_id=#{empId}
    </select>

    <!--    Emp getDeptAndEmpByStepTwo(@Param("deptId") Integer deptId)-->
    <select id="getDeptAndEmpByStepTwo" resultType="Emp">
        select * from t_emp where dept_id=#{deptId}
    </select>


    <!--动态sql
    if：通过判断test属性中的表达式判断标签中的内容是否有效，决定是否会拼接到sql中
    where:若where标签中有条件成立，会自动生成where关键字。
    会自动将where标签中内容前多余的and去掉，但内容后多余的and无法去掉
    若where标签中没有任何一个条件成立，则where没有任何功能。
    trim:prefix,suffix在标签中内容前或后添加指定内容。prefixOverrides，suffixOverrides
    在标签中内容前后去掉指定内容
    -->
    <!--    List<Emp> getEmpByCondition(Emp emp)-->
    <select id="getEmpByCondition" resultType="Emp">
        select * from t_emp
        <trim prefix="where" prefixOverrides="and" suffixOverrides="and">
            <if test="empName!=null and empName!=''">
                and emp_name=#{empName}
            </if>
            <if test="age!=null and age!=''">
                and age=#{age}
            </if>
            <if test="gender!=null and gender!=''">
                and gender=#{gender}
            </if>
        </trim>
    </select>

    <!--choose,when,otherwise
    相当于java中的if...else if...else
    when至少设置一个，otherwise最多设置一个
    -->
    <!--    List<Emp> getEmpByChoose(Emp emp)-->
    <select id="getEmpByChoose" resultType="Emp">
        select <include refid="empColumns"/> from t_emp
        <where>
            <choose>
                <when test="empName!=null and empName!=''">
                    emp_name=#{empName}
                </when>
                <when test="age!=null and age!=''">
                    age=#{age}
                </when>
                <when test="gender!=null and gender!=''">
                    gender=#{gender}
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
        </where>
    </select>

    <!--
    collection:设置要循环的数组或集合
    item:用一个字符串表示数组或集合中的每一个数据
    separator:设置每次循环的数据之间的分隔符
    open:循环的所有内容以什么开始
    close:循环的所有内容以什么结束

    -->
    <!--    void insertMoreEmp(List<Emp> emps)-->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>

    <!--    void deleteMoreEmp(@Param("empIds") Integer[] empIds)-->
    <delete id="deleteMoreEmp">
        delete from t_emp where emp_id in

        <foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
        </foreach>

    </delete>

    <!--sql片段
    可以记录一段sql，可以在需要的地方使用include标签进行引用-->
    <sql id="empColumns">
        emp_id,emp_name,age,gender,dept_id
    </sql>
</mapper>